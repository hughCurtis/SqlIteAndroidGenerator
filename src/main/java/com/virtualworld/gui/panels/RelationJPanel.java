/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.virtualworld.gui.panels;

import com.virtualworld.dao.ctrl.AttributJpaController;
import com.virtualworld.dao.ctrl.RelationJpaController;
import com.virtualworld.dao.ctrl.exceptions.NonexistentEntityException;
import com.virtualworld.dao.entities.Attribut;
import com.virtualworld.dao.entities.DataBase;
import com.virtualworld.dao.entities.Relation;
import com.virtualworld.jtable.CustomRelationJTable;
import com.virtualworld.jtable.listeners.PKSelectionChangeListener;
import com.virtualworld.jtable.models.RelationTableModel;
import com.virtualworld.mediator.RelationFkMediator;
import com.virtualworld.mediator.listeners.MediatorEventListener;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

/**
 *
 * @author Ulrich
 */
public class RelationJPanel extends javax.swing.JPanel
        implements MediatorEventListener, PKSelectionChangeListener {

    private static final Logger LOG = Logger.getLogger(RelationJPanel.class.getName());

    private final RelationJpaController relationJpaController = new RelationJpaController();
    private final AttributJpaController attributJpaController = new AttributJpaController();
    private final int id;
    private Relation relation;
    private final CustomRelationJTable attributesJTable;
    private final RelationFkMediator mediator = RelationFkMediator.getInstance();
    private final DataBase dataBase;

    /**
     * Creates new form relationJPanel
     * @param dataBase
     */
    public RelationJPanel(DataBase dataBase) {
        this.dataBase = dataBase;
        initComponents();
        saveInDatabase();

        attributesJTable = new CustomRelationJTable(relation);
        JScrollPane scroll = new JScrollPane();
        scroll.setViewportView(attributesJTable);
        attributesContainerJPanel.add(scroll);
        id = relation.getId();
        registerToListeners();
    }

    /**
     * Creates new form relationJPanel
     * @param relation
     */
    public RelationJPanel(Relation relation) {
        this.dataBase = relation.getDataBase();
        this.relation = relation;
        initComponents();

        attributesJTable = new CustomRelationJTable(relation);
        JScrollPane scroll = new JScrollPane();
        scroll.setViewportView(attributesJTable);
        attributesContainerJPanel.add(scroll);
        id = relation.getId();
        registerToListeners();
    }

    public Relation getRelation() {
        return relation;
    }

    private void registerToListeners() {
        mediator.updateMediatorListeners();
        mediator.addMediatorEventListener(this);
        attributesJTable.addPKSelectionChangeListener(this);
    }

    private void saveInDatabase() {
        relation = new Relation();
        relation.setDataBase(dataBase);
        relationJpaController.create(relation);
        relation.setName(Relation.DEFAULT_RELATION_NAME + " " + relation.getId());
        try {
            relationJpaController.edit(relation);
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "Erreur lors de l'édition de la relation", e);
        }
    }

    public int getId() {
        return id;
    }

    public void delete() throws NonexistentEntityException {
        try {
            relationJpaController.destroy(id);
            mediator.removeMediatorEventListener(this);
//        onRelationChange();
            mediator.updateMediatorListeners();
        } catch (NonexistentEntityException e) {
            LOG.log(Level.SEVERE, "Erreur lors de la suppression d'une relation", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        delJButton = new javax.swing.JButton();
        addJButton = new javax.swing.JButton();
        attributesContainerJPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(250, 250, 250));

        jCheckBox1.setText("DAO");

        jCheckBox2.setText("DB Helper");

        jCheckBox3.setText("Contract");

        delJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconSUPPRIMER_16x16.png"))); // NOI18N
        delJButton.setText("Supprimer");
        delJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delJButtonActionPerformed(evt);
            }
        });

        addJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPLUS_16x16.png"))); // NOI18N
        addJButton.setText("Ajouter");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox2)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delJButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(delJButton)
                    .addComponent(addJButton))
                .addContainerGap())
        );

        attributesContainerJPanel.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(attributesContainerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attributesContainerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void delJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delJButtonActionPerformed
        try {
            int index = attributesJTable.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner une propriété pour la supprimer", "Selection requise", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            RelationTableModel model = (RelationTableModel) attributesJTable.getModel();
            attributJpaController.destroy(model.getAttributs().get(index).getId());
            model.removeAttribute(index);
            mediator.updateMediatorListeners();
            attributesJTable.repaint();
        } catch (NonexistentEntityException ex) {
            LOG.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_delJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        RelationTableModel model = (RelationTableModel) attributesJTable.getModel();
        Attribut attribut = new Attribut();
        attribut.setRelation(relation);
        attributJpaController.create(attribut);
        model.addAttribute(attribut);
        attributesJTable.repaint();
    }//GEN-LAST:event_addJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JPanel attributesContainerJPanel;
    private javax.swing.JButton delJButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onRelationChange() {
        JComboBox combo = new JComboBox();
        attributJpaController.getPKAttributes().forEach((a) -> {
            combo.addItem(a);
        });
        attributesJTable.getColumn("Clé étrangère").setCellEditor(new DefaultCellEditor(combo));
        attributesJTable.reset();
//        mediator.updateMediatorListeners();
    }

    @Override
    public void onPKSelectionChange(Attribut attribut) {
        mediator.updateMediatorListeners();
        attributesJTable.reset();
    }

    @Override
    public String toString() {
        return relation.getName();
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 29 * hash + this.id;
        hash = 29 * hash + Objects.hashCode(this.relation);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final RelationJPanel other = (RelationJPanel) obj;
        return this.id == other.id;
    }

}
